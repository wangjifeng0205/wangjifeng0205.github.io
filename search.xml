<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>细说SpringBoot的自动装配原理(下)</title>
    <url>/SpringBoot/springboot-autoconf2/</url>
    <content><![CDATA[<p>上一篇说到@SpringBootApplication注解的作用，这一篇文章我们就从启动类来说明。一般的我们写启动类大体都如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码大家都很熟悉，就一行代码很重要：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.run(TestApplication.class, args);</span><br></pre></td></tr></table></figure>

<p>接下来我们一起看看这个类。</p>
<h2 id="1-静态方法SpringApplication-run"><a href="#1-静态方法SpringApplication-run" class="headerlink" title="1. 静态方法SpringApplication.run()"></a>1. 静态方法SpringApplication.run()</h2><p>这个方法的代码如下：</p>
<img src="/images/markdown_images/image-20210716170426619.png" alt="image-20210716170426619" style="zoom:50%;" />

<p>这个方法就做了两件事情，首先初始化了一个SpringBootApplication对象，然后执行这个对象的run方法。接下来我们细看一下这两个步骤。</p>
<h2 id="2-构造方法SpringApplication"><a href="#2-构造方法SpringApplication" class="headerlink" title="2. 构造方法SpringApplication()"></a>2. 构造方法SpringApplication()</h2><p>我们首先看一下构造方法，具体的逻辑实现如下，此处只看大体的流程，具体的细节大家可以自行查看源码。</p>
<img src="/images/markdown_images/image-20210716171807074.png" alt="image-20210716171807074" style="zoom:50%;" />

<p>在初始化这个对象的过程中，Spring默认的进行了一些配置。</p>
<p>首先判断了应用的类型，一般我们都是用tomcat容器，这是一个servlet容器。</p>
<p>接着从META-INF/spring.factories文件中将所有的要注册的初始化器赋值给了bootstrapRegistryInitializers这个属性，注意这个实例在后面执行实例方法SpringApplication.run()的时候会用到。</p>
<p>接着获取了META-INF/spring.factories文件中的ApplicationContextInitializer和ApplicationListener的实例分别复制给了属性initializers和listeners。</p>
<p>最后找到main方法所在的类字节码对象。</p>
<h2 id="3-实例方法SpringApplication-run"><a href="#3-实例方法SpringApplication-run" class="headerlink" title="3. 实例方法SpringApplication.run()"></a>3. 实例方法SpringApplication.run()</h2><p>然后运行了SpringApplication.run这个实例方法，创建了一个Spring应用上下文对象：</p>
<p>run方法的代码太长了，我们分割为三个部分进行说明，大概如下：</p>
<img src="/images/markdown_images/image-20210716172719715.png" alt="image-20210716172719715" style="zoom:50%;" />

<p>首先我们说第一部分：</p>
<img src="/images/markdown_images/image-20210716173539789.png" alt="image-20210716173539789" style="zoom:50%;" />

<p>第一部分主要将在构造方法中设置好的初始化器和监听器运行起来，调用他们对应的方法，进行一些初步操作，具体的操作请自行找到META-INF/spring.factories文件，查看文件里面定义好的类的具体逻辑实现。</p>
<p>第二部是最重要的一部分：</p>
<img src="/images/markdown_images/image-20210716175744548.png" alt="image-20210716175744548" style="zoom:50%;" />

<p>主要是进行了spring应用上下文的配置，然后执行一些初始化操作。在执行上下文对象的过程中会将bean对象都初始化好，该依赖注入的依赖注入等等操作，@SpringBootApplication注解相关操作都会在这里进行触发。</p>
<p>最后一部分：</p>
<img src="/images/markdown_images/image-20210716181414891.png" alt="image-20210716181414891" style="zoom:50%;" />

<p>启动监听器监听上下文，具体的监听器除了Spring事先准配好的，还有你自己实现的监听器。最终都是一个个的java.util.function.Consumer接口的实现类，然后执行这个接口的accept方法。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>细说SpringBoot的自动装配原理(上)</title>
    <url>/SpringBoot/springboot-autoconf1/</url>
    <content><![CDATA[<h2 id="1-什么是SpringBoot"><a href="#1-什么是SpringBoot" class="headerlink" title="1. 什么是SpringBoot?"></a>1. 什么是SpringBoot?</h2><p>对于spring家族的框架来说，我们接触的比较多的可能就是spring，springMVC这两个框架了。<strong>Spring的核心就是IOC和AOP。IOC就是控制反转，即将对象的创建，对象的销毁，对象间的依赖关系等等权力交给Spring，说白了就是让Spring去控制对象的生命周期和对象间的依赖关系。在处理对象间的依赖关系的时候，我们只需要告诉Spring我们需要哪些对象，Spring就会帮助我们配置好，Spring将我们需要的对象配置好的过程就是DI(依赖注入)。AOP就是面向切面编程，面向切面编程是一种思想，Spring框架很优雅的实现了这种思想，它很方便的帮助我们在全局的纵向业务逻辑之上，横向的插入一段逻辑。</strong></p>
<p>在以前没有SpringBoot的时候，我们需要配置的方式是在XML文件中配置好对象的依赖关系，Spring它会读取这些XML文件，从而进行配置。但是当代码变多的时候，需要的配置会越来越多，大量繁琐的XML文件让我们使用Spring框架很是麻烦(为什么Spring一开始要使用XML文件，其实这和注解出现的版本(Java1.5)有很大的关系)，Spring框架本身是优雅的，轻量级的，但是它的配置却是繁琐的，重量级的。为了减轻这种繁琐的工作，提升工作效率，SpringBoot应运而生，下面欢迎我们的主角SpringBoot。<span id="more"></span></p>
<p>SpringBoot框架是个划时代的Java框架(个人观点)，它的核心思想就是<strong>约定优于配置</strong>。它将一些需要集成的配置已经提前帮我们配置好了，我们不用去关注这些，只需要按照约定的规则使用，就可以很好，很高效的处理业务。简单来说就是，SpringBoot框架是为了能够帮助使用Spring框架的开发者快速高效的构建一个基于Spirng框架以及Spring生态体系的应用解决方案。它是对“约定优于配置”这个理念下的一个最佳实践。因此它是一个服务于框架的框架，服务的范围是简化配置文件。SpringBoot的核心就是帮助我们简化配置，进行自动配置，自动配置的原理稍后会讲到。SpringBoot的另一个特点就是非常容易进行扩展自动配置，比如说你自己有需要配置的东西也可以集成到SpringBoot中，具体的就不细讲，大家可以自行百度。</p>
<h2 id="2-SpringBoot的四大核心"><a href="#2-SpringBoot的四大核心" class="headerlink" title="2. SpringBoot的四大核心"></a>2. SpringBoot的四大核心</h2><p>我们先简单的构建一个简单的web项目:</p>
<p>创建一个maven项目，在pom文件中引入以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建启动类和一个测试的控制器：</p>
<img src="/images/markdown_images/image-20210519171240347.png" alt="image-20210519171240347" style="zoom:50%;" />

<p>访问<a href="http://127.0.0.1:8080/test%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%9A">http://127.0.0.1:8080/test就能看到如下的页面：</a></p>
<img src="/images/markdown_images/image-20210519172315409.png" alt="image-20210519172315409" style="zoom:50%;" />

<p>随便定义一个Controller就能够访问得到，这是为什么呢？</p>
<p>springboot是一个约定优于配置的产物，所以在快速构建web应用的背后，其实有很多的约定:</p>
<ol>
<li>项目结构层面，静态文件和页面模版的存放位置变成了src/main/resources对应的子目录下</li>
<li>自动嵌入tomcat作为web容器对外提供http服务，默认使用8080端口监听</li>
<li>自动装配springmvc必要的组件</li>
</ol>
<p>四大核心：</p>
<ol>
<li>EnableAutoConfiguration 自动装配</li>
<li>Starter组件, 开箱即用</li>
<li>Actuator 监控</li>
<li>Spring Boot Cli 为Spring Cloud 提供了Spring Boot 命令行功能</li>
</ol>
<p>前三个特性我们经常用到，但是今天我们主要来细说一下第一个核心功能，EnableAutoConfiguration 的自动配置。</p>
<h2 id="3-相关注解"><a href="#3-相关注解" class="headerlink" title="3. 相关注解"></a>3. 相关注解</h2><p>要了解SpringBoot的自动配置，我们必须先知道几类比较重要的注解。</p>
<h3 id="3-1-Enable-注解"><a href="#3-1-Enable-注解" class="headerlink" title="3.1 @Enable*注解"></a>3.1 @Enable*注解</h3><p>Enable的意思启动，开启的意思，相当于开启某个功能。</p>
<p>SpringBoot自带了很多Enable开头的注解，比如说：</p>
<ul>
<li>@EnableScheduling：开启任务计划的支持。</li>
<li>@EnableAutoConfiguration：开启自动配置。</li>
<li>@EnableAsync：开启异步支持。</li>
</ul>
<p>这些@Enable*注解，如果你观察的仔细地话，你会发现每个这样的注解都会带一个@Import注解，每个@Import注解的value都是一个配置类数组，一般都是一个配置类。那我们必须了解一下@Import注解了。</p>
<h3 id="3-2-Import注解"><a href="#3-2-Import注解" class="headerlink" title="3.2 @Import注解"></a>3.2 @Import注解</h3><p>Import的意思是导入，引入的意思，在传统的spring项目中，我们使用XML进行对象依赖关系的配置，XML标签中就有一个<code>&lt;import resource/&gt;</code>标签，那你知道@Import注解的作用了嘛？@Import注解的作用就是将多个分开的配置合并到一个配置中去。这个注解有很多种用法，我们具体的来讲解一下，方便后面理解SpringBoot自动配置的原理。</p>
<ol>
<li><strong>直接在@Import注解的value属性上写配置类的Class</strong></li>
</ol>
<p>我给大家演示一下：</p>
<p>首先我创建了两个包：<code>demo1</code>和<code>demo2</code></p>
<img src="/images/markdown_images/image-20210519172605965.png" alt="image-20210519172605965" style="zoom:50%;" />

<p>两个包下的代码如下：</p>
<ul>
<li><p>demo1</p>
<p><code>Demo1.class</code>：</p>
<img src="/images/markdown_images/image-20210519172630847.png" alt="image-20210519172630847" style="zoom:50%;" />

<p><code>Demo1Conf.class</code>：</p>
<img src="/images/markdown_images/image-20210519172654486.png" alt="image-20210519172654486" style="zoom:50%;" /></li>
<li><p>demo2</p>
<p><code>Demo2.class</code>：</p>
<img src="/images/markdown_images/image-20210519172709180.png" alt="image-20210519172709180" style="zoom:50%;" />

<p><code>Demo2Conf.class</code>：</p>
<img src="/images/markdown_images/image-20210519172719291.png" alt="image-20210519172719291" style="zoom:50%;" />

<p><code>Demo2App.class</code>：</p>
<img src="/images/markdown_images/image-20210519172734287.png" alt="image-20210519172734287" style="zoom:50%;" /></li>
</ul>
<p>我们先看下结果：</p>
<img src="/images/markdown_images/image-20210519172745857.png" alt="image-20210519172745857" style="zoom:50%;" />

<p>这两个包的代码很清楚，我在demo2包下面创建了一个SpringBoot应用，按照SpringBoot应用启动类的规则，它会加载当前包以及子包下的配置。但是demo1包其实是和demo2包是平级的包，SpringBoot是不会去加载demo1包下的配置，但是我们手动在配置类<code>Demo2Conf.class</code>配置类上加上了@Import注解，将<code>Demo1Conf.class</code>配置加载进来了，代码很直观，相信聪明的你已经懂了，下面我们看第二种方式。</p>
<ol start="2">
<li><p><strong>实现ImportSelector接口的方式</strong></p>
<p>上面讲的第一种方式会将导入的配置类中所有的配置都加载到Spring应用中，但是我们想要有选择地加载配置的话，就要使用第二种方式，实现ImportSelector接口的方式。</p>
<p>我们先看看SpringBoot提供的接口<code>org.springframework.context.annotation.ImportSelector</code>:</p>
<img src="/images/markdown_images/image-20210519175256876.png" alt="image-20210519175256876" style="zoom:50%;" /></li>
</ol>
<p>第一个红框的注释说明了这个接口通常和@Import注解有相同的处理，通常配合起来使用。</p>
<p>第二个红框的注释说明了这个方法主要是来表明哪些类需要加载到Spring容器中，返回值是一个类的全包名数组，这个数据就是要加载到Spring容器中的Bean。也就是说这个数组是你可以写逻辑来控制要加载哪些Bean的，接下来我们写一个简单的例子。</p>
<p>我们先创建一个User实体类:</p>
<p>注意我在空参构造方法中给两个属性赋值了。</p>
<img src="/images/markdown_images/image-20210519180151512.png" alt="image-20210519180151512" style="zoom:50%;" />

<p>再写一个类实现ImportSelector接口，实现接口方法将User加载到Spring容器中，其他的什么也不做：</p>
<img src="/images/markdown_images/image-20210519180111291.png" alt="image-20210519180111291" style="zoom:50%;" />

<p>然后我们定义一个注解，注解中使用@Import注解，将我们刚实现的导入选择器加载:</p>
<img src="/images/markdown_images/image-20210519180415663.png" alt="image-20210519180415663" style="zoom:50%;" />

<p>最后我们在启动类上加上这个注解，同时写一个控制器，返回一个User对象:</p>
<img src="/images/markdown_images/image-20210519180519083.png" alt="image-20210519180519083" style="zoom:50%;" />

<p>启动应用，访问<a href="http://localhost:8080/user%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2">http://localhost:8080/user，我们会看到如下页面</a>:</p>
<img src="/images/markdown_images/image-20210519180631316.png" alt="image-20210519180631316" style="zoom:50%;" />

<p>说明user对象加载到Spring容器中去了，注意，在没有特殊声明的情况下，加载到Spring容器中的Bean对象默认就是类名称的小驼峰写法。</p>
<ol start="3">
<li><strong>实现ImportBeanDefinitionRegistrar接口的方式</strong></li>
</ol>
<p>我们将刚刚的TestImportSelector类稍微改造一下，实现这个接口，然后在方法中加载一个beanName为wjfUser的User对象:</p>
<img src="/images/markdown_images/image-20210519181626915.png" alt="image-20210519181626915" style="zoom:50%;" />

<p>然后将启动类的依赖注入的User对象的名称改成wjfUser:</p>
<img src="/images/markdown_images/image-20210519181816548.png" alt="image-20210519181816548" style="zoom:50%;" />

<p>然后启动项目，访问<a href="http://localhost:8080/user,%E4%BC%9A%E5%BE%97%E5%88%B0%E5%92%8C%E5%88%9A%E5%88%9A%E4%B8%80%E6%A0%B7%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82">http://localhost:8080/user,会得到和刚刚一样的结果。</a></p>
<h3 id="3-3-ComponentScan注解和-Configuration注解"><a href="#3-3-ComponentScan注解和-Configuration注解" class="headerlink" title="3.3 @ComponentScan注解和@Configuration注解"></a>3.3 @ComponentScan注解和@Configuration注解</h3><p>这两个注解都比较简单，但是都很重要，如果是使用SpringBoot构建的应用，基本上都要使用这两个注解，我们简单了解一下这两个注解：</p>
<p>@Configuration: 它是JavaConfig形式的基于Spring IOC容器的配置类使用的一种注解。如果大家细心一点就会发现Configuration注解的本质是一个Component注解，这个注解会被AnnotationConfigApplicationContext加载，而AnnotationConfigApplicationContext是ApplicationContext的一个具体实现，表示根据配置注解启动应用上下文。</p>
<p>@ComponentScan: 扫描指定路径下的标识了需要装配的类，自动装配到spring的Ioc容器中。标识需要装配的类的形式主要是：@Component、@Repository、@Service、@Controller这类的注解标识的类。</p>
<h2 id="4-深入SpringBoot自动配置原理"><a href="#4-深入SpringBoot自动配置原理" class="headerlink" title="4. 深入SpringBoot自动配置原理"></a>4. 深入SpringBoot自动配置原理</h2><p>SprngBoot的自动配置原理我会分为两次讲解，分为两条支线进行说明，此次我们从注解入手。</p>
<p>首先我们先看一下<code>@SpringBootApplication</code>这个注解：</p>
<img src="/images/markdown_images/image-20210530171357188.png" alt="image-20210530171357188" style="zoom:50%;" />

<p>这个注解主要包含了两个比较重要的注解，一个就是@SpringBootConfiguration注解，另一个就是本文主讲的@EnableAutoConfigutation注解了，我们先简单的看一下@SpringBootConfiguration：</p>
<img src="/images/markdown_images/image-20210530171718502.png" alt="image-20210530171718502" style="zoom:50%;" />

<p>这个注解就做了一件事情，将启动类作为一个配置类，这就是为什么我们在启动类上除了@SpringBootApplication这个注解能生效，其他加在启动类上的Spring相关注解也能生效的一个原因。</p>
<p>接下来我们重点看一下<code>@EnableAutoConfiguration</code>这个注解：</p>
<img src="/images/markdown_images/image-20210530172606022.png" alt="image-20210530172606022" style="zoom:67%;" />

<p>这个注解的作用毫无疑问，从名字就可以看出，即：启动自动配置。</p>
<p>它也包含两个重要的注解：@AutoConfigurationPackage和@Import(AutoConfigurationImportSelector.class)。</p>
<h3 id="4-1-AutoConfigurationPackage"><a href="#4-1-AutoConfigurationPackage" class="headerlink" title="4.1 @AutoConfigurationPackage"></a>4.1 @AutoConfigurationPackage</h3><p>我们先看看@AutoConfigurationPackage：</p>
<img src="/images/markdown_images/image-20210530172900281.png" alt="image-20210530172900281" style="zoom:50%;" />

<p>这个注解上面还有一个注解@Import，我们前面说到，这个注解的作用就是将其他类的配置引入到当前类中，所以我们需要重点的看一下</p>
<p><code>AutoConfigurationPackages.Registrar.class</code>这个类：</p>
<img src="/images/markdown_images/image-20210530173346648.png" alt="image-20210530173346648" style="zoom:50%;" />

<p>我们前面在讲解的时候说到，@Import注解通常使用的三种方式中的最后一种就是实现ImportBeanDefinitionRegistrar接口，这个接口的作用就是定义bean，让Spring知道哪些类是要初始化为Bean放到容器中的。然后我们看registerBeanDefinitions这个方法，这个方法我在上面讲解@Import的第三种使用方式的时候讲过，就是定义bean然后注册，所以这个方法也是的，然后我们看看这个方法他注册了哪些bean，我们接着看，我们会发现PackageImports这个类通过注解元数据可以获取到包名数组，然后变成一个字符串数组：</p>
<img src="/images/markdown_images/image-20210530174227592.png" alt="image-20210530174227592" style="zoom:50%;" />

<p>那我们接着看PackageImports这个类到底干了什么：</p>
<img src="/images/markdown_images/image-20210530174502039.png" alt="image-20210530174502039" style="zoom:50%;" />

<p>这个类就一个构造方法，首先获取了@AutoConfigurationPackage这个注解的属性定义Map，然后从这个属性定义的Map中拿出了basePackages和basePackageClasses这两个属性，这两个属性我们就很熟悉了，我们发现在@SpingBootApplication注解上也能看到：</p>
<img src="/images/markdown_images/image-20210530175204167.png" alt="image-20210530175204167" style="zoom:50%;" />

<p>所以，显然易见，@SpringBootApplication注解上填的包名最终都会进入到这个类中进行处理，如果@SpringBootApplication注解上没有填写这个属性，那么SpringBoot就会自动将启动类所在的包名传进去。但是其实@SpringBootApplication注解的包扫描也是基于@ComponentScan这个注解实现的，这个注解我们说过，只要是@Component、@Repository、@Service、@Controller这类的注解标识的类都会加载到Spring容器中，<strong>所以你应该已经知道了@AutoConfigurationPackage这个注解的作用了吧，它会扫描所有用@ComponentScan注解标识的包名下的类，将这些包下标识了@Component、@Repository、@Service、@Controller这类的注解的类加载到Spring容器中作为一个Bean对象。</strong></p>
<h3 id="4-2-Import-AutoConfigurationImportSelector-class"><a href="#4-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="4.2 @Import(AutoConfigurationImportSelector.class)"></a>4.2 @Import(AutoConfigurationImportSelector.class)</h3><p>前面已经说过@Import注解的作用了，此处是@Import注解的第二种用法，实现ImportSelector接口的方式。我们直接看AutoConfigurationImportSelector这个类吧：</p>
<img src="/images/markdown_images/image-20210530200607402.png" alt="image-20210530200607402" style="zoom:50%;" />

<p>我们先看getAutoConfigurationEntry这个方法：</p>
<img src="/images/markdown_images/image-20210530201234893.png" alt="image-20210530201234893" style="zoom:50%;" />

<p>这个方法基本上以及说明了SpringBoot自动配置的触发流程，获取配置信息，删除重复项(主要是配置可能重复了，需要整合到一块，提升性能)，获取排除的配置项以及过滤基本上都和org.springframework.boot.autoconfigure.condition包下的注解配置有关，我们重点就说一下获取候选配置这一块，所以我们看看图片中红框的方法getCandidateConfigurations：</p>
<img src="/images/markdown_images/image-20210530202139127.png" alt="image-20210530202139127" style="zoom:50%;" />

<p>这个方法中我们看到了一个类<code>SpringFactoriesLoader</code>,这个类是Spring框架的一个工具类，他的类的作用是：</p>
<p><strong>Spring框架内内部使用的通用工厂加载机制。SpringFactoriesLoader从“META-INF/spring.factories”文件加载和实例化给定类型的工厂，这些文件可能存在于类路径中的多个 JAR 文件中。 spring.factories文件必须采用“ Properties格式，其中键是接口或抽象类的全限定名称，值是用逗号分隔的实现类名称列表。</strong></p>
<p>我们看一下SpringFactoriesLoader.loadFactoryNames这个方法：</p>
<img src="/images/markdown_images/image-20210530202851736.png" alt="image-20210530202851736" style="zoom:50%;" />

<p>这个方法的里面又调用了一个静态方法：</p>
<img src="/images/markdown_images/image-20210530203342931.png" alt="image-20210530203342931" style="zoom:50%;" />

<p>这个时候就知道了，Spring将这个文件转化为Properties,然后以英文逗号分割value，将获得的实现类的类名用List装起来，然后用接口(key，即这些实现类的接口的类名)名称为key,实现类类名列表为value放在一个map集合中返回。</p>
<p>这个配置文件(即：META-INF/spring.factories)通常是一些其他第三方框架需要集成SpringBoot的时候，需要进行编写的，例如Mybatis,我们引入mybatis整合SpringBoot的jar包，在jar包下面找到了spring.factories文件，文件内就几行，我们来分析一下Mybatis是如何集成SpringBoot的。</p>
<img src="/images/markdown_images/image-20210530204054176.png" alt="image-20210530204054176" style="zoom:50%;" />

<p>在文件中我们看到mybatis自己写了一个实现类：MybatisAutoConfiguration，那么SpringBoot就会将这个类加载到Spring容器中，那我们看一下这个类：</p>
<img src="/images/markdown_images/image-20210530204654360.png" alt="image-20210530204654360" style="zoom:50%;" />

<p>Mybatis将这个类写成了一个配置类，还使用了org.springframework.boot.autoconfigure.condition包下的两个条件注解，这两个注解的作用是：</p>
<ol>
<li>@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })：当类路径下存在SqlSessionFactory和SqlSessionFactoryBean这两个类时才会启动配置类。</li>
<li>@ConditionalOnBean(DataSource.class)：当Spring容器中存在一个DataSource的bean对象时，才会启动这个配置类。</li>
</ol>
<p>另外两个注解，一个是加载在bootstrap.yml文件中写的mybatis配置信息，另一个就是数据库连接信息自动配置，大家可以自行深入了解。</p>
<p>以上就是@SpringBootApplication这个注解的分析，这只是加载自动配置的一部分，另一部分请看下篇，鉴于本人知识有限，如果对我的讲解有疑问，欢迎打扰，让我们共同进步！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
