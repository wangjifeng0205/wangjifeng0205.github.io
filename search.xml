<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>细说SpringBoot的自动装配原理(下)</title>
    <url>/SpringBoot/springboot-autoconf2/</url>
    <content><![CDATA[<p>上一篇说到@SpringBootApplication注解的作用，这一篇文章我们就从启动类来说明。一般的我们写启动类大体都如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码大家都很熟悉，就一行代码很重要：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringApplication.run(TestApplication.class, args);</span><br></pre></td></tr></table></figure>

<p>接下来我们一起看看这个类。<span id="more"></span></p>
<h2 id="1-静态方法SpringApplication-run"><a href="#1-静态方法SpringApplication-run" class="headerlink" title="1. 静态方法SpringApplication.run()"></a>1. 静态方法SpringApplication.run()</h2><p>这个方法的代码如下：</p>
<img src="/images/markdown_images/image-20210716170426619.png" alt="image-20210716170426619" style="zoom:50%;" />

<p>这个方法就做了两件事情，首先初始化了一个SpringBootApplication对象，然后执行这个对象的run方法。接下来我们细看一下这两个步骤。</p>
<h2 id="2-构造方法SpringApplication"><a href="#2-构造方法SpringApplication" class="headerlink" title="2. 构造方法SpringApplication()"></a>2. 构造方法SpringApplication()</h2><p>我们首先看一下构造方法，具体的逻辑实现如下，此处只看大体的流程，具体的细节大家可以自行查看源码。</p>
<img src="/images/markdown_images/image-20210716171807074.png" alt="image-20210716171807074" style="zoom:50%;" />

<p>在初始化这个对象的过程中，Spring默认的进行了一些配置。</p>
<p>首先判断了应用的类型，一般我们都是用tomcat容器，这是一个servlet容器。</p>
<p>接着从META-INF/spring.factories文件中将所有的要注册的初始化器赋值给了bootstrapRegistryInitializers这个属性，注意这个实例在后面执行实例方法SpringApplication.run()的时候会用到。</p>
<p>接着获取了META-INF/spring.factories文件中的ApplicationContextInitializer和ApplicationListener的实例分别复制给了属性initializers和listeners。</p>
<p>最后找到main方法所在的类字节码对象。</p>
<h2 id="3-实例方法SpringApplication-run"><a href="#3-实例方法SpringApplication-run" class="headerlink" title="3. 实例方法SpringApplication.run()"></a>3. 实例方法SpringApplication.run()</h2><p>然后运行了SpringApplication.run这个实例方法，创建了一个Spring应用上下文对象：</p>
<p>run方法的代码太长了，我们分割为三个部分进行说明，大概如下：</p>
<img src="/images/markdown_images/image-20210716172719715.png" alt="image-20210716172719715" style="zoom:50%;" />

<p>首先我们说第一部分：</p>
<img src="/images/markdown_images/image-20210716173539789.png" alt="image-20210716173539789" style="zoom:50%;" />

<p>第一部分主要将在构造方法中设置好的初始化器和监听器运行起来，调用他们对应的方法，进行一些初步操作，具体的操作请自行找到META-INF/spring.factories文件，查看文件里面定义好的类的具体逻辑实现。</p>
<p>第二部是最重要的一部分：</p>
<img src="/images/markdown_images/image-20210716175744548.png" alt="image-20210716175744548" style="zoom:50%;" />

<p>主要是进行了spring应用上下文的配置，然后执行一些初始化操作。在执行上下文对象的过程中会将bean对象都初始化好，该依赖注入的依赖注入等等操作，@SpringBootApplication注解相关操作都会在这里进行触发。</p>
<p>主要的方法就是refreshContext方法，这个方法对于不同类型的应用有不同的逻辑：</p>
<ul>
<li><p>如果是servlet容器，对应org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh()。</p>
</li>
<li><p>如果是是反应式容器，对应org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh()。</p>
</li>
<li><p>具体的逻辑大家可以自己查阅。</p>
</li>
</ul>
<p>最后一部分：</p>
<img src="/images/markdown_images/image-20210716181414891.png" alt="image-20210716181414891" style="zoom:50%;" />

<p>启动监听器监听上下文，具体的监听器除了Spring事先准配好的，还有你自己实现的监听器。最终都是一个个的java.util.function.Consumer接口的实现类，然后执行这个接口的accept方法。</p>
<p>以上就是springboot自动配置的全部了，大家如果对我的理解有疑问可以指出来，我们交流探讨一下。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引及其优化</title>
    <url>/Database/mysql-index/</url>
    <content><![CDATA[<p>索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。</p>
<p>MySQL的索引类型有很多，但是我们常用的索引类型一般就两种：<strong>B+Tree 索引</strong>和<strong>Hash索引</strong>。我们详细介绍一下这两种索引及其优化的方法。<span id="more"></span></p>
<h2 id="1-B-Tree-索引"><a href="#1-B-Tree-索引" class="headerlink" title="1. B+Tree 索引"></a>1. B+Tree 索引</h2><p>B+ Tree索引是大多数 MySQL 存储引擎的默认索引类型。它将对数据的无序IO操作变成了顺序IO操作。至于什么是B-Tree树，即平衡树(Balance Tree)，更具体的请自行百度了解。</p>
<p>因为不再需要进行全表扫描，只需要对树进行搜索即可，所以查找速度快很多。</p>
<p>因为 B+ Tree 的有序性，所以除了用于查找，还可以用于排序和分组。</p>
<p>可以指定多个列作为索引列，多个索引列共同组成键。</p>
<p><strong>适用于全键值、键值范围和键前缀查找，其中键前缀查找只适用于最左前缀查找。如果不是按照索引列的顺序进行查找，则无法使用索引。</strong></p>
<h2 id="2-Hash-索引"><a href="#2-Hash-索引" class="headerlink" title="2. Hash 索引"></a>2. Hash 索引</h2><p>哈希索引能以 O(1) 时间进行查找，但是失去了有序性：</p>
<ul>
<li>无法用于排序与分组；</li>
<li>只支持精确查找，无法用于部分查找和范围查找。</li>
</ul>
<p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如快速的哈希查找。</p>
<h3 id="3-总结两种类型的索引"><a href="#3-总结两种类型的索引" class="headerlink" title="3. 总结两种类型的索引"></a>3. 总结两种类型的索引</h3><ul>
<li>B+Tree-INDEX: 每一个叶子节点都包含指向下一个叶子节点的指针，从而方便叶子节点的范围遍历。B-Tree通常意味着所有的值都是按顺序存储的，并且每一个叶子页到根的距离相同，<strong>很适合查找范围数据</strong>。所以可以对诸如时间类型的字段加B+Tree索引。</li>
<li>Hash-INDEX: 哈希索引基于哈希表实现，<strong>只有精确索引所有列的查询才有效</strong>。对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码。哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每个数据的指针。</li>
</ul>
<h2 id="4-索引优化"><a href="#4-索引优化" class="headerlink" title="4. 索引优化"></a>4. 索引优化</h2><ul>
<li><p>索引列的顺序：让选择性最强的索引列放在前面。比如一个表的主键就是选择性最强的。</p>
</li>
<li><p>对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引，只索引开始的部分字符。必须遵循最左匹配原则。</p>
</li>
<li><p>独立的列，不参与表达式：</p>
<p>在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数，否则无法使用索引。</p>
<p>例如下面的查询不能使用 actor_id 列的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT actor_id FROM sakila.actor WHERE actor_id + 1 &#x3D; 5;</span><br></pre></td></tr></table></figure></li>
<li><p>在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。</p>
<p>例如下面的语句中，最好把 actor_id 和 film_id 设置为多列索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT film_id, actor_ id FROM sakila.film_actor</span><br><span class="line">WHERE actor_id &#x3D; 1 AND film_id &#x3D; 1;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>以上就是我对索引优化的简单总结，后面我会介绍一些其他的优化方式，比如主从复制，读写分离，SQL优化等等。</p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL索引</tag>
      </tags>
  </entry>
  <entry>
    <title>细说SpringBoot的自动装配原理(上)</title>
    <url>/SpringBoot/springboot-autoconf1/</url>
    <content><![CDATA[<h2 id="1-什么是SpringBoot"><a href="#1-什么是SpringBoot" class="headerlink" title="1. 什么是SpringBoot?"></a>1. 什么是SpringBoot?</h2><p>对于spring家族的框架来说，我们接触的比较多的可能就是spring，springMVC这两个框架了。<strong>Spring的核心就是IOC和AOP。IOC就是控制反转，即将对象的创建，对象的销毁，对象间的依赖关系等等权力交给Spring，说白了就是让Spring去控制对象的生命周期和对象间的依赖关系。在处理对象间的依赖关系的时候，我们只需要告诉Spring我们需要哪些对象，Spring就会帮助我们配置好，Spring将我们需要的对象配置好的过程就是DI(依赖注入)。AOP就是面向切面编程，面向切面编程是一种思想，Spring框架很优雅的实现了这种思想，它很方便的帮助我们在全局的纵向业务逻辑之上，横向的插入一段逻辑。</strong></p>
<p>在以前没有SpringBoot的时候，我们需要配置的方式是在XML文件中配置好对象的依赖关系，Spring它会读取这些XML文件，从而进行配置。但是当代码变多的时候，需要的配置会越来越多，大量繁琐的XML文件让我们使用Spring框架很是麻烦(为什么Spring一开始要使用XML文件，其实这和注解出现的版本(Java1.5)有很大的关系)，Spring框架本身是优雅的，轻量级的，但是它的配置却是繁琐的，重量级的。为了减轻这种繁琐的工作，提升工作效率，SpringBoot应运而生，下面欢迎我们的主角SpringBoot。<span id="more"></span></p>
<p>SpringBoot框架是个划时代的Java框架(个人观点)，它的核心思想就是<strong>约定优于配置</strong>。它将一些需要集成的配置已经提前帮我们配置好了，我们不用去关注这些，只需要按照约定的规则使用，就可以很好，很高效的处理业务。简单来说就是，SpringBoot框架是为了能够帮助使用Spring框架的开发者快速高效的构建一个基于Spirng框架以及Spring生态体系的应用解决方案。它是对“约定优于配置”这个理念下的一个最佳实践。因此它是一个服务于框架的框架，服务的范围是简化配置文件。SpringBoot的核心就是帮助我们简化配置，进行自动配置，自动配置的原理稍后会讲到。SpringBoot的另一个特点就是非常容易进行扩展自动配置，比如说你自己有需要配置的东西也可以集成到SpringBoot中，具体的就不细讲，大家可以自行百度。</p>
<h2 id="2-SpringBoot的四大核心"><a href="#2-SpringBoot的四大核心" class="headerlink" title="2. SpringBoot的四大核心"></a>2. SpringBoot的四大核心</h2><p>我们先简单的构建一个简单的web项目:</p>
<p>创建一个maven项目，在pom文件中引入以下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建启动类和一个测试的控制器：</p>
<img src="/images/markdown_images/image-20210519171240347.png" alt="image-20210519171240347" style="zoom:50%;" />

<p>访问<a href="http://127.0.0.1:8080/test%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%9A">http://127.0.0.1:8080/test就能看到如下的页面：</a></p>
<img src="/images/markdown_images/image-20210519172315409.png" alt="image-20210519172315409" style="zoom:50%;" />

<p>随便定义一个Controller就能够访问得到，这是为什么呢？</p>
<p>springboot是一个约定优于配置的产物，所以在快速构建web应用的背后，其实有很多的约定:</p>
<ol>
<li>项目结构层面，静态文件和页面模版的存放位置变成了src/main/resources对应的子目录下</li>
<li>自动嵌入tomcat作为web容器对外提供http服务，默认使用8080端口监听</li>
<li>自动装配springmvc必要的组件</li>
</ol>
<p>四大核心：</p>
<ol>
<li>EnableAutoConfiguration 自动装配</li>
<li>Starter组件, 开箱即用</li>
<li>Actuator 监控</li>
<li>Spring Boot Cli 为Spring Cloud 提供了Spring Boot 命令行功能</li>
</ol>
<p>前三个特性我们经常用到，但是今天我们主要来细说一下第一个核心功能，EnableAutoConfiguration 的自动配置。</p>
<h2 id="3-相关注解"><a href="#3-相关注解" class="headerlink" title="3. 相关注解"></a>3. 相关注解</h2><p>要了解SpringBoot的自动配置，我们必须先知道几类比较重要的注解。</p>
<h3 id="3-1-Enable-注解"><a href="#3-1-Enable-注解" class="headerlink" title="3.1 @Enable*注解"></a>3.1 @Enable*注解</h3><p>Enable的意思启动，开启的意思，相当于开启某个功能。</p>
<p>SpringBoot自带了很多Enable开头的注解，比如说：</p>
<ul>
<li>@EnableScheduling：开启任务计划的支持。</li>
<li>@EnableAutoConfiguration：开启自动配置。</li>
<li>@EnableAsync：开启异步支持。</li>
</ul>
<p>这些@Enable*注解，如果你观察的仔细地话，你会发现每个这样的注解都会带一个@Import注解，每个@Import注解的value都是一个配置类数组，一般都是一个配置类。那我们必须了解一下@Import注解了。</p>
<h3 id="3-2-Import注解"><a href="#3-2-Import注解" class="headerlink" title="3.2 @Import注解"></a>3.2 @Import注解</h3><p>Import的意思是导入，引入的意思，在传统的spring项目中，我们使用XML进行对象依赖关系的配置，XML标签中就有一个<code>&lt;import resource/&gt;</code>标签，那你知道@Import注解的作用了嘛？@Import注解的作用就是将多个分开的配置合并到一个配置中去。这个注解有很多种用法，我们具体的来讲解一下，方便后面理解SpringBoot自动配置的原理。</p>
<ol>
<li><strong>直接在@Import注解的value属性上写配置类的Class</strong></li>
</ol>
<p>我给大家演示一下：</p>
<p>首先我创建了两个包：<code>demo1</code>和<code>demo2</code></p>
<img src="/images/markdown_images/image-20210519172605965.png" alt="image-20210519172605965" style="zoom:50%;" />

<p>两个包下的代码如下：</p>
<ul>
<li><p>demo1</p>
<p><code>Demo1.class</code>：</p>
<img src="/images/markdown_images/image-20210519172630847.png" alt="image-20210519172630847" style="zoom:50%;" />

<p><code>Demo1Conf.class</code>：</p>
<img src="/images/markdown_images/image-20210519172654486.png" alt="image-20210519172654486" style="zoom:50%;" /></li>
<li><p>demo2</p>
<p><code>Demo2.class</code>：</p>
<img src="/images/markdown_images/image-20210519172709180.png" alt="image-20210519172709180" style="zoom:50%;" />

<p><code>Demo2Conf.class</code>：</p>
<img src="/images/markdown_images/image-20210519172719291.png" alt="image-20210519172719291" style="zoom:50%;" />

<p><code>Demo2App.class</code>：</p>
<img src="/images/markdown_images/image-20210519172734287.png" alt="image-20210519172734287" style="zoom:50%;" /></li>
</ul>
<p>我们先看下结果：</p>
<img src="/images/markdown_images/image-20210519172745857.png" alt="image-20210519172745857" style="zoom:50%;" />

<p>这两个包的代码很清楚，我在demo2包下面创建了一个SpringBoot应用，按照SpringBoot应用启动类的规则，它会加载当前包以及子包下的配置。但是demo1包其实是和demo2包是平级的包，SpringBoot是不会去加载demo1包下的配置，但是我们手动在配置类<code>Demo2Conf.class</code>配置类上加上了@Import注解，将<code>Demo1Conf.class</code>配置加载进来了，代码很直观，相信聪明的你已经懂了，下面我们看第二种方式。</p>
<ol start="2">
<li><p><strong>实现ImportSelector接口的方式</strong></p>
<p>上面讲的第一种方式会将导入的配置类中所有的配置都加载到Spring应用中，但是我们想要有选择地加载配置的话，就要使用第二种方式，实现ImportSelector接口的方式。</p>
<p>我们先看看SpringBoot提供的接口<code>org.springframework.context.annotation.ImportSelector</code>:</p>
<img src="/images/markdown_images/image-20210519175256876.png" alt="image-20210519175256876" style="zoom:50%;" /></li>
</ol>
<p>第一个红框的注释说明了这个接口通常和@Import注解有相同的处理，通常配合起来使用。</p>
<p>第二个红框的注释说明了这个方法主要是来表明哪些类需要加载到Spring容器中，返回值是一个类的全包名数组，这个数据就是要加载到Spring容器中的Bean。也就是说这个数组是你可以写逻辑来控制要加载哪些Bean的，接下来我们写一个简单的例子。</p>
<p>我们先创建一个User实体类:</p>
<p>注意我在空参构造方法中给两个属性赋值了。</p>
<img src="/images/markdown_images/image-20210519180151512.png" alt="image-20210519180151512" style="zoom:50%;" />

<p>再写一个类实现ImportSelector接口，实现接口方法将User加载到Spring容器中，其他的什么也不做：</p>
<img src="/images/markdown_images/image-20210519180111291.png" alt="image-20210519180111291" style="zoom:50%;" />

<p>然后我们定义一个注解，注解中使用@Import注解，将我们刚实现的导入选择器加载:</p>
<img src="/images/markdown_images/image-20210519180415663.png" alt="image-20210519180415663" style="zoom:50%;" />

<p>最后我们在启动类上加上这个注解，同时写一个控制器，返回一个User对象:</p>
<img src="/images/markdown_images/image-20210519180519083.png" alt="image-20210519180519083" style="zoom:50%;" />

<p>启动应用，访问<a href="http://localhost:8080/user%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%A6%82%E4%B8%8B%E9%A1%B5%E9%9D%A2">http://localhost:8080/user，我们会看到如下页面</a>:</p>
<img src="/images/markdown_images/image-20210519180631316.png" alt="image-20210519180631316" style="zoom:50%;" />

<p>说明user对象加载到Spring容器中去了，注意，在没有特殊声明的情况下，加载到Spring容器中的Bean对象默认就是类名称的小驼峰写法。</p>
<ol start="3">
<li><strong>实现ImportBeanDefinitionRegistrar接口的方式</strong></li>
</ol>
<p>我们将刚刚的TestImportSelector类稍微改造一下，实现这个接口，然后在方法中加载一个beanName为wjfUser的User对象:</p>
<img src="/images/markdown_images/image-20210519181626915.png" alt="image-20210519181626915" style="zoom:50%;" />

<p>然后将启动类的依赖注入的User对象的名称改成wjfUser:</p>
<img src="/images/markdown_images/image-20210519181816548.png" alt="image-20210519181816548" style="zoom:50%;" />

<p>然后启动项目，访问<a href="http://localhost:8080/user,%E4%BC%9A%E5%BE%97%E5%88%B0%E5%92%8C%E5%88%9A%E5%88%9A%E4%B8%80%E6%A0%B7%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82">http://localhost:8080/user,会得到和刚刚一样的结果。</a></p>
<h3 id="3-3-ComponentScan注解和-Configuration注解"><a href="#3-3-ComponentScan注解和-Configuration注解" class="headerlink" title="3.3 @ComponentScan注解和@Configuration注解"></a>3.3 @ComponentScan注解和@Configuration注解</h3><p>这两个注解都比较简单，但是都很重要，如果是使用SpringBoot构建的应用，基本上都要使用这两个注解，我们简单了解一下这两个注解：</p>
<p>@Configuration: 它是JavaConfig形式的基于Spring IOC容器的配置类使用的一种注解。如果大家细心一点就会发现Configuration注解的本质是一个Component注解，这个注解会被AnnotationConfigApplicationContext加载，而AnnotationConfigApplicationContext是ApplicationContext的一个具体实现，表示根据配置注解启动应用上下文。</p>
<p>@ComponentScan: 扫描指定路径下的标识了需要装配的类，自动装配到spring的Ioc容器中。标识需要装配的类的形式主要是：@Component、@Repository、@Service、@Controller这类的注解标识的类。</p>
<h2 id="4-深入SpringBoot自动配置原理"><a href="#4-深入SpringBoot自动配置原理" class="headerlink" title="4. 深入SpringBoot自动配置原理"></a>4. 深入SpringBoot自动配置原理</h2><p>SprngBoot的自动配置原理我会分为两次讲解，分为两条支线进行说明，此次我们从注解入手。</p>
<p>首先我们先看一下<code>@SpringBootApplication</code>这个注解：</p>
<img src="/images/markdown_images/image-20210530171357188.png" alt="image-20210530171357188" style="zoom:50%;" />

<p>这个注解主要包含了两个比较重要的注解，一个就是@SpringBootConfiguration注解，另一个就是本文主讲的@EnableAutoConfigutation注解了，我们先简单的看一下@SpringBootConfiguration：</p>
<img src="/images/markdown_images/image-20210530171718502.png" alt="image-20210530171718502" style="zoom:50%;" />

<p>这个注解就做了一件事情，将启动类作为一个配置类，这就是为什么我们在启动类上除了@SpringBootApplication这个注解能生效，其他加在启动类上的Spring相关注解也能生效的一个原因。</p>
<p>接下来我们重点看一下<code>@EnableAutoConfiguration</code>这个注解：</p>
<img src="/images/markdown_images/image-20210530172606022.png" alt="image-20210530172606022" style="zoom:67%;" />

<p>这个注解的作用毫无疑问，从名字就可以看出，即：启动自动配置。</p>
<p>它也包含两个重要的注解：@AutoConfigurationPackage和@Import(AutoConfigurationImportSelector.class)。</p>
<h3 id="4-1-AutoConfigurationPackage"><a href="#4-1-AutoConfigurationPackage" class="headerlink" title="4.1 @AutoConfigurationPackage"></a>4.1 @AutoConfigurationPackage</h3><p>我们先看看@AutoConfigurationPackage：</p>
<img src="/images/markdown_images/image-20210530172900281.png" alt="image-20210530172900281" style="zoom:50%;" />

<p>这个注解上面还有一个注解@Import，我们前面说到，这个注解的作用就是将其他类的配置引入到当前类中，所以我们需要重点的看一下</p>
<p><code>AutoConfigurationPackages.Registrar.class</code>这个类：</p>
<img src="/images/markdown_images/image-20210530173346648.png" alt="image-20210530173346648" style="zoom:50%;" />

<p>我们前面在讲解的时候说到，@Import注解通常使用的三种方式中的最后一种就是实现ImportBeanDefinitionRegistrar接口，这个接口的作用就是定义bean，让Spring知道哪些类是要初始化为Bean放到容器中的。然后我们看registerBeanDefinitions这个方法，这个方法我在上面讲解@Import的第三种使用方式的时候讲过，就是定义bean然后注册，所以这个方法也是的，然后我们看看这个方法他注册了哪些bean，我们接着看，我们会发现PackageImports这个类通过注解元数据可以获取到包名数组，然后变成一个字符串数组：</p>
<img src="/images/markdown_images/image-20210530174227592.png" alt="image-20210530174227592" style="zoom:50%;" />

<p>那我们接着看PackageImports这个类到底干了什么：</p>
<img src="/images/markdown_images/image-20210530174502039.png" alt="image-20210530174502039" style="zoom:50%;" />

<p>这个类就一个构造方法，首先获取了@AutoConfigurationPackage这个注解的属性定义Map，然后从这个属性定义的Map中拿出了basePackages和basePackageClasses这两个属性，这两个属性我们就很熟悉了，我们发现在@SpingBootApplication注解上也能看到：</p>
<img src="/images/markdown_images/image-20210530175204167.png" alt="image-20210530175204167" style="zoom:50%;" />

<p>所以，显然易见，@SpringBootApplication注解上填的包名最终都会进入到这个类中进行处理，如果@SpringBootApplication注解上没有填写这个属性，那么SpringBoot就会自动将启动类所在的包名传进去。但是其实@SpringBootApplication注解的包扫描也是基于@ComponentScan这个注解实现的，这个注解我们说过，只要是@Component、@Repository、@Service、@Controller这类的注解标识的类都会加载到Spring容器中，<strong>所以你应该已经知道了@AutoConfigurationPackage这个注解的作用了吧，它会扫描所有用@ComponentScan注解标识的包名下的类，将这些包下标识了@Component、@Repository、@Service、@Controller这类的注解的类加载到Spring容器中作为一个Bean对象。</strong></p>
<h3 id="4-2-Import-AutoConfigurationImportSelector-class"><a href="#4-2-Import-AutoConfigurationImportSelector-class" class="headerlink" title="4.2 @Import(AutoConfigurationImportSelector.class)"></a>4.2 @Import(AutoConfigurationImportSelector.class)</h3><p>前面已经说过@Import注解的作用了，此处是@Import注解的第二种用法，实现ImportSelector接口的方式。我们直接看AutoConfigurationImportSelector这个类吧：</p>
<img src="/images/markdown_images/image-20210530200607402.png" alt="image-20210530200607402" style="zoom:50%;" />

<p>我们先看getAutoConfigurationEntry这个方法：</p>
<img src="/images/markdown_images/image-20210530201234893.png" alt="image-20210530201234893" style="zoom:50%;" />

<p>这个方法基本上以及说明了SpringBoot自动配置的触发流程，获取配置信息，删除重复项(主要是配置可能重复了，需要整合到一块，提升性能)，获取排除的配置项以及过滤基本上都和org.springframework.boot.autoconfigure.condition包下的注解配置有关，我们重点就说一下获取候选配置这一块，所以我们看看图片中红框的方法getCandidateConfigurations：</p>
<img src="/images/markdown_images/image-20210530202139127.png" alt="image-20210530202139127" style="zoom:50%;" />

<p>这个方法中我们看到了一个类<code>SpringFactoriesLoader</code>,这个类是Spring框架的一个工具类，他的类的作用是：</p>
<p><strong>Spring框架内内部使用的通用工厂加载机制。SpringFactoriesLoader从“META-INF/spring.factories”文件加载和实例化给定类型的工厂，这些文件可能存在于类路径中的多个 JAR 文件中。 spring.factories文件必须采用“ Properties格式，其中键是接口或抽象类的全限定名称，值是用逗号分隔的实现类名称列表。</strong></p>
<p>我们看一下SpringFactoriesLoader.loadFactoryNames这个方法：</p>
<img src="/images/markdown_images/image-20210530202851736.png" alt="image-20210530202851736" style="zoom:50%;" />

<p>这个方法的里面又调用了一个静态方法：</p>
<img src="/images/markdown_images/image-20210530203342931.png" alt="image-20210530203342931" style="zoom:50%;" />

<p>这个时候就知道了，Spring将这个文件转化为Properties,然后以英文逗号分割value，将获得的实现类的类名用List装起来，然后用接口(key，即这些实现类的接口的类名)名称为key,实现类类名列表为value放在一个map集合中返回。</p>
<p>这个配置文件(即：META-INF/spring.factories)通常是一些其他第三方框架需要集成SpringBoot的时候，需要进行编写的，例如Mybatis,我们引入mybatis整合SpringBoot的jar包，在jar包下面找到了spring.factories文件，文件内就几行，我们来分析一下Mybatis是如何集成SpringBoot的。</p>
<img src="/images/markdown_images/image-20210530204054176.png" alt="image-20210530204054176" style="zoom:50%;" />

<p>在文件中我们看到mybatis自己写了一个实现类：MybatisAutoConfiguration，那么SpringBoot就会将这个类加载到Spring容器中，那我们看一下这个类：</p>
<img src="/images/markdown_images/image-20210530204654360.png" alt="image-20210530204654360" style="zoom:50%;" />

<p>Mybatis将这个类写成了一个配置类，还使用了org.springframework.boot.autoconfigure.condition包下的两个条件注解，这两个注解的作用是：</p>
<ol>
<li>@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })：当类路径下存在SqlSessionFactory和SqlSessionFactoryBean这两个类时才会启动配置类。</li>
<li>@ConditionalOnBean(DataSource.class)：当Spring容器中存在一个DataSource的bean对象时，才会启动这个配置类。</li>
</ol>
<p>另外两个注解，一个是加载在bootstrap.yml文件中写的mybatis配置信息，另一个就是数据库连接信息自动配置，大家可以自行深入了解。</p>
<p>以上就是@SpringBootApplication这个注解的分析，这只是加载自动配置的一部分，另一部分请看下篇，鉴于本人知识有限，如果对我的讲解有疑问，欢迎打扰，让我们共同进步！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>事务与SQL优化</title>
    <url>/Database/transactional-sql/</url>
    <content><![CDATA[<h2 id="1-事务-Transactional"><a href="#1-事务-Transactional" class="headerlink" title="1. 事务(Transactional)"></a>1. 事务(Transactional)</h2><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。<strong>简单来说就是在一个业务场景中，一组SQL语句执行的最小单位。</strong>这一组SQL语句的执行不可分割，要么全部成功，要么全部失败。</p>
<h3 id="1-1-事务的四大特征-ACID"><a href="#1-1-事务的四大特征-ACID" class="headerlink" title="1.1 事务的四大特征(ACID)"></a>1.1 事务的四大特征(ACID)</h3><ul>
<li><p><strong>原子性(Atomicity)</strong></p>
<p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。即：一组SQL语句的执行不可分割，要么全部成功，要么全部失败。</p>
<p>回滚可以用回滚日志（Undo Log）来实现，回滚日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p>
</li>
<li><p><strong>一致性(Consistency)</strong></p>
<p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对同一个数据的读取结果都是相同的。</p>
</li>
<li><p><strong>隔离性(Isolation)</strong></p>
<p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。隔离性有四个隔离级别，分别是:</p>
<ul>
<li><p>读未提交（READ UNCOMMITTED）</p>
</li>
<li><p>读已提交（READ COMMITTED）</p>
</li>
<li><p>可重复读（REPEATABLE READ）</p>
</li>
<li><p>串行化（SERIALIZABLE）</p>
<p>后面再对这四种隔离级别进行详细解释。</p>
</li>
</ul>
</li>
<li><p><strong>持久性(Durability)</strong></p>
<p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p>
<p>系统发生崩溃可以用重做日志（Redo Log）进行恢复，从而实现持久性。与回滚日志记录数据的逻辑修改不同，重做日志记录的是数据页的物理修改。</p>
</li>
</ul>
<p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系：</p>
<ul>
<li>只有满足一致性，事务的执行结果才是正确的。</li>
<li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li>
<li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li>
<li>事务满足持久化是为了能应对系统崩溃的情况。</li>
</ul>
<h3 id="1-2-并发下的问题"><a href="#1-2-并发下的问题" class="headerlink" title="1.2 并发下的问题"></a>1.2 并发下的问题</h3><p>在非并发的情况下，并不会产生什么问题，但是在并发的情况下，事务的隔离性很难保证，即一个事务没有提交之前对其他事务不可见这个特性很难保证不出问题，进而很难保证数据的一致性，即事务的一致性很难保证。并发下会出现哪些问题呢？</p>
<ul>
<li><p><strong>修改丢失</strong></p>
<p>修改丢失：丢失修改指一个事务的更新操作被另外一个事务的更新操作替换。</p>
<p>例如：T1 和 T2 两个事务都对一个数据进行修改，T1 先修改并提交生效，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p>
<p>按理来说，在T2修改操作正在进行但未完成的同时如果有查询操作，读取到的数据应该是T1刚刚修改的数据。但是实际上不是，读取到的数据要么是T1修改之前的数据，要么是T2修改之后的数据。这就违背了事务的隔离性和一致性。</p>
</li>
<li><p><strong>脏读</strong></p>
<p>脏读：一个事务读到另一个事务未提交的数据。</p>
<p>例如：数据库存的数据是10，事务T1开启事务，对这个数据进行了修改，将10修改为20，此时事务T1没有提交事务，另一个事务T2读取到这个数据为20。</p>
<p>正常来说T2这个事务读取到的数据应该还是10，因为T1这个事务还没有提交，这就违背了事务的隔离性和一致性。</p>
</li>
<li><p><strong>不可重复读</strong></p>
<p>不可重复读：指在同一个事务中，多次读取同一份数据，读取的结果不一样。</p>
<p>例如：数据库存的数据是10，事务T1开启事务，对这个数据进行读取，读到的数据为10，此时事务T1并未提交事务，另一个事务T2开启事务并对这个数据进行了修改，修改为20，T2提交事务，此时事务T1对这个数据再读一次，读到的结果为20。</p>
<p>正常来说，T1两次读取到的数据都应该是10，T2的修改操作应该阻塞，因为T1这个事务还没有提交，这就违背了事务的隔离性和一致性。</p>
</li>
<li><p><strong>幻读</strong></p>
<p>幻读：幻读本质上也属于不可重复读的情况，T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。感觉上和不可重复读很像，但是其实他们是有差别的，一个是具体到某些记录数，一个是符合某个范围的记录数，但是具体有多少记录数不确定。</p>
<p>例如：事务T1开启事务，事务T1读取某个范围的数据，发现有10条，此时事务T1没有提交事务，事务T2插入了10条符合这个范围条件的数据，T1再次读取这个范围的数据，读取到20条数。</p>
<p>正常来说，事务T1在事务提交之前，读取到的数据应该一直都是10条，违背了事务的隔离性和一致性。</p>
</li>
</ul>
<h3 id="1-3-数据库的锁"><a href="#1-3-数据库的锁" class="headerlink" title="1.3 数据库的锁"></a>1.3 数据库的锁</h3><p>为了解决上述的四个事务隔离性问题，数据库开发商在设计数据库系统的时候，规范了事务的隔离性，创建了四个隔离级别，分别来解决这四个问题，但是在了解这四个隔离级别是如何解决问题之前，我们必须先知道数据库中内置了哪些锁，因为在数据库隔离级别中就用到了这些锁。</p>
<p>数据库一般有两种粒度的锁：表级锁和行级锁。</p>
<p>顾名思义，表级锁就是事务在进行数据库操作的时候会锁住整个表，其他事务不能对表进行数据库操作。行级锁就是事务对某一行或某几行数据记录进行数据库操作时，其他事务不能对这些记录进行数据库更新操作，但是可以对其他的数据记录进行任何数据库操作。</p>
<p>数据库的锁一般有两种类型：共享锁(读锁)和排它锁(写锁)。</p>
<p>对于锁的类型，一般有以下两个规定：</p>
<ul>
<li>一个事务对数据对象 A 加了写锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li>
<li>一个事务对数据对象 A 加了读锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加读锁，但是不能加写锁。</li>
</ul>
<p>数据库锁的使用一般要遵循以下规定：</p>
<ul>
<li><p><strong>一级锁规定</strong>：事务 T 要修改数据 A 时必须加写锁，直到 T 结束才释放锁。</p>
<p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p>
</li>
<li><p><strong>二级锁规定</strong>：在一级锁规定的基础上，要求读取数据 A 时必须加读锁，读取完马上释放读锁。</p>
<p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据一级锁规定，会加写锁，那么就不能再加读锁了，也就是不会读取数据。</p>
</li>
<li><p><strong>三级锁规定</strong>：在二级锁规定的基础上，要求读取数据 A 时必须加读锁，直到事务结束了才能释放读锁。</p>
<p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加写锁，从而避免了在读的期间数据发生改变。</p>
</li>
</ul>
<p>由以上介绍，可以得出：</p>
<ul>
<li><strong>行级读锁和行级读锁是可以共存的。</strong></li>
<li><strong>行级写锁不和任何锁共存。</strong></li>
<li><strong>表级写锁不和任何锁共存。</strong></li>
<li><strong>表级读锁和行级读锁可以共存。</strong></li>
</ul>
<p>所以接下来我们来看四种隔离级别是如何解锁上述的四种问题的。</p>
<h3 id="1-4-事务的四种隔离级别"><a href="#1-4-事务的四种隔离级别" class="headerlink" title="1.4 事务的四种隔离级别"></a>1.4 事务的四种隔离级别</h3><ul>
<li><p><strong>读未提交（READ UNCOMMITTED）</strong></p>
<p><strong>定义</strong>：事务中的修改，即使没有提交，对其它事务也是可见的。</p>
<p><strong>实现原理</strong>：事务在读数据的时候并未对数据加锁。事务在修改数据的时候只对数据增加了行级共享锁。</p>
<p><strong>解析</strong>：在读取数据的时候没有加锁，所以其他事务可以在当前事务读取数据的时候对数据进行修改，所以会出现脏读问题。</p>
<p>当前事务在进行修改数据的时候，会加行级共享锁，所以允许其他事务和当前事务一起读取数据，但是如果其他事务想修改数据，需要加行级排它锁，但是行级排它锁不和任何锁共存，所以其他事务修改数据的操作会阻塞，就不会淹没当前事务的修改操作，解决了修改丢失问题。</p>
</li>
<li><p><strong>读已提交（READ COMMITTED）</strong></p>
<p><strong>定义</strong>：一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p>
<p><strong>实现原理</strong>：事务对当前被读取的数据加<strong>行级共享锁（当读到时才加锁）</strong>，<strong>一旦读完该行，立即释放该行级共享锁；</strong>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到<strong>事务结束才释放</strong>。</p>
<p><strong>解析</strong>：当前事务对数据行加行级共享锁，其他事务可以和当前事务一起读数据，但是其他事务如果对数据行进行修改操作，则会阻塞，但是当前事务读取数据完毕之后，立马就释放了行级共享锁，并不是事务结束之后在释放锁；在当前事务进行修改操作的时候，加了行级排它锁，其他事务无法修改此数据行，也无法读取此数据行，当前事务结束自己的事务之后才释放行级排它锁，解决了修改丢失，脏读问题。因为当前事务在读取数据之后就立马释放了行级共享锁，并不是事务结束之后再释放锁，所以在当前事务为结束事务之前，其他事务时可以对数据进行修改操作的，就会产生不可重复读问题。</p>
</li>
<li><p><strong>可重复读（REPEATABLE READ）</strong></p>
<p><strong>定义</strong>：保证在同一个事务中多次读取同一数据的结果是一样的。</p>
<p><strong>实现原理</strong>：事务在读取某数据的瞬间（就是开始读取的瞬间），必须先对其加<strong>行级共享锁</strong>，直到<strong>事务结束才释放；</strong>事务在更新某数据的瞬间（就是发生更新的瞬间），必须先对其加<strong>行级排他锁</strong>，直到<strong>事务结束才释放。</strong></p>
<p><strong>解析</strong>：当前事务在读取数据时，会加行级共享锁，并且是到事务结束时才释放，所以其他事务不能在当前事务未提交之前修改数据，解决了不可重复读问题，但是不能解决幻读问题，请看下面的示例：</p>
<p>事务T1开启事务并读取某个范围的数据，读取到10条数据，那么会对这10条数据加行级共享锁，此时T1事务没有结束事务，其他事务只能读取这10条数据，不能修改；当另一个事务T2添加了一条符合这个范围的数据，此时新加的这一条数据是不在T1事务的行级共享锁的范围内的，但是此时T1事务再次查询，读到的数据就不是10条数据了，是11条数据，此时就产生了幻读。</p>
</li>
<li><p><strong>串行化（SERIALIZABLE）</strong></p>
<p><strong>定义</strong>：强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。该隔离级别需要加锁实现，因为要使用加锁机制保证同一时间只有一个事务执行，也就是保证事务串行执行。</p>
<p>可序列化(Serializable)是最高的隔离级别，前面提到的所有的隔离级别都无法解决的幻读，在可序列化的隔离级别中可以解决。产生幻读的原因是事务在进行范围查询的时候没有增加范围锁(range-locks：给SELECT 的查询中使用一个“WHERE”子句描述范围加锁），所以导致幻读。</p>
<p><strong>实现原理</strong>：事务在读取数据时，必须先对其加<strong>表级共享锁</strong> ，直到<strong>事务结束才释放；</strong>事务在更新数据时，必须先对其加<strong>表级排他锁 <strong>，直到</strong>事务结束才释放</strong>。</p>
<p><strong>解析</strong>：根据表级锁的解释，读锁之间可以并行；但是读事务和写事务是不能并行的，而且是整个表都无法操作的，也就不存在幻读的问题。但是这样做数据库效率就很低下，并发性就越低。</p>
<p>虽然可序列化解决了脏读、不可重复读、幻读等读现象。但是序列化事务会产生以下效果：</p>
<p>1.无法读取其它事务已修改但未提交的记录。</p>
<p>2.在当前事务完成之前，其它事务不能修改目前事务已读取的记录。</p>
<p>3.在当前事务完成之前，其它事务所插入的新记录，其索引键值不能在当前事务的任何语句所读取的索引键范围中。</p>
</li>
</ul>
<p><strong>四种事务隔离级别从隔离程度上越来越高，但同时在并发性上也就越来越低。之所以有这么几种隔离级别，就是为了方便开发人员在开发过程中根据业务需要选择最合适的隔离级别。</strong></p>
<p>MySQL的事务的隔离级别默认是：<strong>可重复读（REPEATABLE READ）</strong>。</p>
<h2 id="2-SQL优化"><a href="#2-SQL优化" class="headerlink" title="2. SQL优化"></a>2. SQL优化</h2><p>上面讲到了事务，在事务中会涉及到各种锁，在写SQL的时候如果不注意sql的写法和方式，很容易就造成大面的sql执行阻塞。这也就是为什么先说事务在将sql优化的原因。</p>
<h3 id="2-1-从数据库本身进行优化"><a href="#2-1-从数据库本身进行优化" class="headerlink" title="2.1 从数据库本身进行优化"></a>2.1 从数据库本身进行优化</h3><p>从数据库本身进行优化的意思是数据库本身提供了很多的函数，运算操作符等，有的操作符和函数性能好，有的操作符和函数性能差，下面我们大致的列举一下MySQL中常用的函数优化和操作符优化。注意：<strong>以下举例中的字段是加索引的，违背一下任何一种规则，都会导致该字段的索引失效。</strong></p>
<ul>
<li><p><strong>避免全表扫描</strong></p>
<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。建立索引之后，查询首先会先通过索引去查找，这样就避免了全表扫描，性能提升会很大。、</p>
</li>
<li><p><strong>避免判断 null 值</strong></p>
<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描。</p>
<p>比如：</p>
<p><code>is null</code> ,<code>is not null</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from s_table where num is null</span><br></pre></td></tr></table></figure>

<p>这种方式的判断，会导致数据库放弃使用索引，使用全表扫描。</p>
<p>可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询：<code>select id from t where num=0</code>。此时数据库就会优先使用索引。</p>
</li>
<li><p><strong>避免不等值判断</strong></p>
<p>应尽量避免在 where 子句中使用<code>!=</code>或<code>&lt;&gt;</code>操作符，否则引擎将放弃使用索引而进行全表扫描。</p>
</li>
<li><p><strong>避免使用 or 逻辑</strong></p>
<p>应尽量避免在 where 子句中使用 <code>or</code> 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from s_table where num&#x3D;10 or num&#x3D;20</span><br></pre></td></tr></table></figure>

<p>我们可以改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from s_table where num&#x3D;10</span><br><span class="line">union all</span><br><span class="line">select id from s_table where num&#x3D;20</span><br></pre></td></tr></table></figure>

<p><code>union all</code>是数据表的纵向连接，跟<code>left join</code>和<code>right join</code>的横向表连接是对着的。并且查询的结果如果有重复行是不会合并的。</p>
</li>
<li><p><strong>慎用 in 和 not in 逻辑</strong></p>
<p><code>in</code> 和 <code>not in</code> 也要慎用，否则会导致全表扫描。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from s_table1 where num in (select id from s_table2 where id &gt; 10)</span><br></pre></td></tr></table></figure>

<p>我们可以改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from s_table1 as t1 inner join (select id from s_table2 where id &gt; 10) as t2 on t1.id &#x3D; t2.id</span><br></pre></td></tr></table></figure>

<p>内连接查询会将两张表结果的交集展示出来，结果也是一样的。</p>
</li>
<li><p><strong>注意模糊查询</strong></p>
<p>类似<code>like &#39;%abc%&#39;</code>的这样的where条件是不会使用索引的，会导致全表扫描的，如果业务需求允许的话(绝大多数需求是不允许的)，可以改成<code>like &#39;abc%&#39;</code>，因为这样就可以使用索引了，遵循索引的最左匹配原则。但是绝大多数需求是要求左右两边都需要模糊搜索的，我个人建议使用全文检索引擎，比如Elastic Search这种能分词的，ES是基于Lucene构建的，采用的是一种倒排索引的方式，感兴趣的可以自行百度。</p>
</li>
<li><p><strong>避免查询条件中字段计算</strong></p>
<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from t where num&#x2F;2 &#x3D; 100</span><br></pre></td></tr></table></figure>

<p>可以改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id from t where num &#x3D; 100*2</span><br></pre></td></tr></table></figure></li>
<li><p><strong>组合索引使用</strong></p>
<p>在使用索引字段作为条件时，如果该索引是组合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。简单来说就是尽量让查询中where子句的条件书写顺序和组合索引的定义顺序一致。遵循最左匹配原则。在创建组合索引的时候，组合索引的字段的值不能有null,否则这个字段对组合索引来说不生效。</p>
</li>
<li><p><strong>少用以下关键字和操作符</strong></p>
<ul>
<li>少用<code>*</code>，不管是查询多少字段，尽量将字段列举出来，不要使用<code>*</code>。</li>
<li>少用<code>DISTINCT</code>关键字，可以使用其他方式代替，实际中很多时候可以使用<code>group by</code>的方式解决。</li>
<li>一些操作字符串的函数会导致查询特别慢，如果可以，尽量在业务代码中处理。<h3 id="2-2-从数据表连接上优化"><a href="#2-2-从数据表连接上优化" class="headerlink" title="2.2 从数据表连接上优化"></a>2.2 从数据表连接上优化</h3></li>
</ul>
</li>
</ul>
<p>数据表的连接其实也很影响查询的效率，一般遵循以下原则：</p>
<ul>
<li><p><strong>外连接优于内连接</strong></p>
</li>
<li><p><strong>联表数量不宜超过5个</strong></p>
<p>联表数量不能太多了，不然联接出来的表会很大，查询就会变慢。而且这个时候，连接的表所查询的行会被共享锁锁住，如果有其他的事务要修改被连接的表就会阻塞。所以，有的时候并不是连接查询快，如果很多表连接查询，其实可以拆开成多个查询，这样速度会快很多，对其他事务的修改操作影响也会小一些。</p>
</li>
<li><p><strong>当多表连接时，尽量保证左表和右表的ON子句的条件中，有一个表的条件在表中是唯一的</strong></p>
<p>比如：</p>
<p>假设有三张表：</p>
<p>user(用户表)：</p>
<table>
<thead>
<tr>
<th align="center">id(主键)</th>
<th align="center">name(姓名)</th>
<th align="center">age(年龄)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">wjf</td>
<td align="center">18</td>
</tr>
</tbody></table>
<p>login_log(登录日志表)：</p>
<table>
<thead>
<tr>
<th align="center">id(主键)</th>
<th align="center">user_id(用户id)</th>
<th align="center">login_time(登录时间)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2021-07-23 10:30:25</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">2021-07-23 11:30:25</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">1</td>
<td align="center">2021-07-23 12:30:25</td>
</tr>
</tbody></table>
<p>attendance(考勤表)：</p>
<table>
<thead>
<tr>
<th align="center">id(主键)</th>
<th align="center">user_id(用户id)</th>
<th align="center">attendance_time(考勤时间)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2021-07-22</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">2021-07-23</td>
</tr>
</tbody></table>
<p><strong>以上三张表，纯粹是演示所使用，不存在具体的业务逻辑</strong>。</p>
<p>假设我们有如下的一个SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from login_log as t1 left join attendance as t2 on t1.user_id &#x3D; t2.user_id</span><br></pre></td></tr></table></figure>

<p>这个sql语句就不符合<strong>当多表连接时，尽量保证左表和右表的ON子句的条件中，有一个表的条件在表中是唯一的</strong>这个条件，因为这两张表的on子句的条件是<code>t1.user_id = t2.user_id</code>，user_id在这两张表中都不是唯一的，在两张表中都出现了很多次，这样查询的结果就会产生笛卡尔积，当两张表的数据量很大时，查询绝对直接爆炸。</p>
<p>假设我们还有如下的SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from login_log as t1 left join user as t2 on t1.user_id &#x3D; t2.id</span><br></pre></td></tr></table></figure>

<p>这样就是符合<strong>当多表连接时，尽量保证左表和右表的ON子句的条件中，有一个表的条件在表中是唯一的</strong>这个条件的。</p>
</li>
<li><p><strong>多表联查时，在遵循业务逻辑的前提下，小表在前，大表在后</strong></p>
<p>当有多个表连接查询的时候，在不改变查询结果和遵循业务逻辑的前提下，数据量小的表在连接的时候优先级比数据量大的表的优先级高。因为小表在前，连接产生的虚拟中间表就更小，如果先连接大表，虚拟中间表会特别大，耗时也会很长，也会阻塞其他事务的一些操作。有的时候连接的顺序不一样，查询速度简直一个天上一个地下。</p>
</li>
</ul>
<h3 id="2-3-从数据库架构上优化"><a href="#2-3-从数据库架构上优化" class="headerlink" title="2.3 从数据库架构上优化"></a>2.3 从数据库架构上优化</h3><ul>
<li><p><strong>主从复制</strong></p>
<p>主要涉及三个线程：binlog 线程、I/O 线程和 SQL 线程。</p>
<ul>
<li><strong>binlog 线程</strong> ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。</li>
<li><strong>I/O 线程</strong> ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。</li>
<li><strong>SQL 线程</strong> ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。</li>
</ul>
<img src="/images/markdown_images/master-slave.png" alt="master-slave"  />

<p>俗话说的好，人多力量大，多几台数据库服务器，数据访问压力肯定就更小了。</p>
</li>
<li><p><strong>读写分离</strong></p>
<p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p>
<p>读写分离能提高性能的原因在于：</p>
<ul>
<li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li>
<li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li>
<li>增加冗余，提高可用性。</li>
</ul>
<p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p>
<img src="/images/markdown_images/master-slave-proxy.png" alt="master-slave-proxy"  />

<p>以上就是我的简单总结，限于本人知识有限，如有错误请给我发邮件指出，欢迎交流，共同学习。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>MySQL索引</tag>
        <tag>事务</tag>
        <tag>SQL优化</tag>
      </tags>
  </entry>
</search>
