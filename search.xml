<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>细说SpringBoot的自动装配原理</title>
    <url>/wangjifeng0205.github.io/SpringBoot/SpringBoot-AutoConfig1/</url>
    <content><![CDATA[<h2 id="1-什么是SpringBoot"><a href="#1-什么是SpringBoot" class="headerlink" title="1. 什么是SpringBoot?"></a>1. 什么是SpringBoot?</h2><p>对于spring家族的框架来说，我们接触的比较多的可能就是spring，springMVC这两个框架了。<strong>Spring的核心就是IOC和AOP。IOC就是控制反转，即将对象的创建，对象的销毁，对象间的依赖关系等等权力交给Spring，说白了就是让Spring去控制对象的生命周期和对象间的依赖关系。在处理对象间的依赖关系的时候，我们只需要告诉Spring我们需要哪些对象，Spring就会帮助我们配置好，Spring将我们需要的对象配置的过程就是DI(依赖注入)。AOP就是面向切面编程，面向切面编程是一种思想，Spring框架很优雅的实现了这种思想，它很方便的帮助我们在全局的纵向业务逻辑之上，横向的插入一段逻辑。</strong></p>
<p>在以前没有SpringBoot的时候，我们需要配置的方式是在XML文件中配置好对象的依赖关系，Spring它会读取这些XML文件，从而进行配置。但是当代码变多的时候，需要的配置会越来越多，大量繁琐的XML文件让我们使用Spring框架是很麻烦的，Spring框架本身是优雅的，轻量级的，但是它的配置却是繁琐的，重量级的。为了减轻这种繁琐的工作，提升工作效率，SpringBoot应运而生，下面欢迎我们的主角SpringBoot。</p>
<p>SpringBoot框架是个划时代的Java框架(个人观点)，它的核心思想就是<strong>约定优于配置</strong>。<span id="more"></span> 它将一些需要集成的配置已经提前帮我们配置好了，我们不用去关注这些，只需要按照约定的规则使用，就可以很好，很高效的处理业务。简单来说就是，SpringBoot框架是为了能够帮助使用Spring框架的开发者快速高效的构建一个基于Spirng框架以及Spring生态体系的应用解决方案。它是对“约定优于配置”这个理念下的一个最佳实践。因此它是一个服务于框架的框架，服务的范围是简化配置文件。SpringBoot的核心就是帮助我们简化配置，进行自动配置，自动配置的原理稍后会讲到。SpringBoot的另一个特点就是非常容易进行扩展自动配置，比如说你自己有需要配置的东西也可以集成到SpringBoot中，具体的就不细讲，大家可以自行百度。</p>
<h2 id="2-SpringBoot的四大核心"><a href="#2-SpringBoot的四大核心" class="headerlink" title="2. SpringBoot的四大核心"></a>2. SpringBoot的四大核心</h2><p>我们使用Spring官网的<a href="https://start.spring.io生成一个简单的web项目，随便定义一个Controller就能够访问得到，这是为什么呢？">https://start.spring.io生成一个简单的web项目，随便定义一个Controller就能够访问得到，这是为什么呢？</a></p>
<p>springboot是一个约定优于配置的产物，所以在快速构建web应用的背后，其实有很多的约定。</p>
<ol>
<li>项目结构层面，静态文件和页面模版的存放位置变成了src/main/resources对应的子目录下</li>
<li>自动嵌入tomcat作为web容器对外提供http服务，默认使用8080端口监听</li>
<li>自动装配springmvc必要的组件</li>
</ol>
<p>四大核心：</p>
<ol>
<li>EnableAutoConfiguration 自动装配</li>
<li>Starter组件, 开箱即用</li>
<li>Actuator 监控</li>
<li>Spring Boot Cli 为Spring Cloud 提供了Spring Boot 命令行功能</li>
</ol>
<p>前三个特性我们经常用到，但是今天我们主要来细说一下第一个核心功能，EnableAutoConfiguration 的自动配置。</p>
<h2 id="3-相关注解"><a href="#3-相关注解" class="headerlink" title="3. 相关注解"></a>3. 相关注解</h2><p>要了解SpringBoot的自动配置，我们必须先知道几类比较重要的注解。</p>
<h3 id="3-1-Enable-注解"><a href="#3-1-Enable-注解" class="headerlink" title="3.1 @Enable*注解"></a>3.1 @Enable*注解</h3><p>Enable的意思启动，开启的意思，相当于开启某个功能。</p>
<p>SpringBoot自带了很多Enable开头的注解，比如说：</p>
<ul>
<li>@EnableScheduling：开启任务计划的支持。</li>
<li>@EnableAutoConfiguration：开启自动配置。</li>
<li>@EnableAsync：开启异步支持。</li>
</ul>
<p>这些@Enable*注解，如果你观察的仔细地话，你会发现每个这样的注解都会带一个@Import注解，每个@Import注解的value都是一个配置类数组，一般都是一个配置类。那我们必须了解一下@Import注解了。</p>
<h3 id="3-2-Import注解"><a href="#3-2-Import注解" class="headerlink" title="3.2 @Import注解"></a>3.2 @Import注解</h3><p>Import的意思是导入，引入的意思，在传统的spring项目中，我们使用XML进行对象依赖关系的配置，XML标签中就有一个<code>&lt;import resource/&gt;</code>标签，那你知道@Import注解的作用了嘛？@Import注解的作用就是将多个分开的配置合并到一个配置中去。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
